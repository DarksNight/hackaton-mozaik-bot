import telebot
import config
import psycopg2

from telebot import *

con = psycopg2.connect(
    database="vfzuiagd",
    user="vfzuiagd",
    password="J24sY4O6hd61gwZandkRrLXK4B9hN6xe",
    host="kandula.db.elephantsql.com",
    port="5432"
)

cur = con.cursor()

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    regions = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–∞–π–æ–Ω–∏")
    nearest = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ –º–æ–∑–∞—ó–∫–∏")

    markup.add(regions, nearest)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç, {0.first_name}!"
                                      "\n–¢—É—Ç –í–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –º–æ–∑–∞—ó–∫–∏ –õ—å–≤–æ–≤–∞.".format(message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)
    print(message.from_user)


@bot.message_handler(content_types=['text', 'location'])
def lala(message):
    if message.chat.type == 'private':
        markup = types.InlineKeyboardMarkup(row_width=2)
        othermarkup = types.InlineKeyboardMarkup(row_width=2)
        moreinfo = types.InlineKeyboardButton("–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ", callback_data='author')
        showonmap = types.InlineKeyboardButton("üó∫ –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞ –º–∞–ø—ñ", callback_data='map')
        prev = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='prev')
        next = types.InlineKeyboardButton("‚û° –î–∞–ª—ñ", callback_data='next')

        markup.add(showonmap, moreinfo)
        othermarkup.add(showonmap, moreinfo, prev, next)
        kmarkup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        if message.content_type == 'location':
            print(message.location)
            user_latitude = message.location.latitude
            user_longitude = message.location.longitude
            cur.execute("select * from mozaik")
            rows = cur.fetchall()
            for row in rows:
                loc = row[11].split(' ')
                latitude = loc[0]
                longitude = loc[1]
                if -0.02 <= (float(user_latitude) - float(latitude)) <= 0.02:
                    if -0.02 <= (float(user_longitude) - float(longitude)) <= 0.02:
                        path = row[10]
                        bot.send_photo(message.chat.id, open(path, "rb"))
                        bot.send_message(message.chat.id,
                                         '–¢–∏–ø –º—É—Ä–∞–ª—É - ' + row[5] + '\n–õ–æ–∫–∞—Ü—ñ—è, —É —è–∫—ñ–π —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –º—É—Ä–∞–ª - ' + row[
                                             6] + '\n' + row[1] + ' ' + row[2] + ' ' + row[3].format(message.from_user,
                                                                                                     bot.get_me()),
                                         parse_mode='html', reply_markup=markup)

        if message.text == "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–∞–π–æ–Ω–∏":
            item1 = types.KeyboardButton("–ì–∞–ª–∏—Ü—å–∫–∏–π —Ä–∞–π–æ–Ω")
            item2 = types.KeyboardButton("–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω")
            item3 = types.KeyboardButton("–®–µ–≤—á–µ–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω")
            item4 = types.KeyboardButton("–õ–∏—á–∞–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω")
            item5 = types.KeyboardButton("–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π —Ä–∞–π–æ–Ω")
            item6 = types.KeyboardButton("–°–∏—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω")
            back = types.KeyboardButton("–ù–∞–∑–∞–¥ üîô")
            kmarkup.add(item1, item2, item3, item4, item5, item6, back)
            bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω, —É —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –º–æ–∑–∞—ó–∫–∏",
                                              parse_mode='html', reply_markup=kmarkup)
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            regions = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–∞–π–æ–Ω–∏")
            nearest = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ –º–æ–∑–∞—ó–∫–∏")
            kmarkup.add(regions, nearest)
            bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥...",
                             parse_mode='html', reply_markup=kmarkup)

        if message.text == "–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ –º–æ–∑–∞—ó–∫–∏":
            loc = types.KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True)
            back = types.KeyboardButton("–ù–∞–∑–∞–¥ üîô")
            kmarkup.add(loc, back)
            bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –í–∞—à–∞ –ª–æ–∫–∞—Ü—ñ—è", reply_markup=kmarkup)

        if message.text == '–ì–∞–ª–∏—Ü—å–∫–∏–π —Ä–∞–π–æ–Ω':
            cur.execute("SELECT * from mozaik where district = '–ì–∞–ª–∏—Ü—å–∫–∏–π'")
            rows = cur.fetchall()
            print(len(rows))
            for row in rows:
                path = row[10]
                bot.send_photo(message.chat.id, open(path, "rb"))
                bot.send_message(message.chat.id, '–¢–∏–ø –º—É—Ä–∞–ª—É - '+row[5]+'\n–õ–æ–∫–∞—Ü—ñ—è, —É —è–∫—ñ–π —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –º—É—Ä–∞–ª - '+row[6]+'\n'+row[1]+' '+row[2]+' '+row[3].format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)

        elif message.text == '–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω':
            cur.execute("SELECT * from mozaik where district = '–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π'")
            rows = cur.fetchall()
            print(len(rows))
            for row in rows:
                path = row[10]
                bot.send_photo(message.chat.id, open(path, "rb"))
                bot.send_message(message.chat.id, '–¢–∏–ø –º—É—Ä–∞–ª—É - '+row[5]+'\n–õ–æ–∫–∞—Ü—ñ—è, —É —è–∫—ñ–π —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –º—É—Ä–∞–ª - '+row[6]+'\n'+row[1]+' '+row[2]+' '+row[3].format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)

        elif message.text == '–õ–∏—á–∞–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω':
            cur.execute("SELECT * from mozaik where district = '–õ–∏—á–∞–∫—ñ–≤—Å—å–∫–∏–π'")
            rows = cur.fetchall()
            print(len(rows))
            for row in rows:
                path = row[10]
                bot.send_photo(message.chat.id, open(path, "rb"))
                bot.send_message(message.chat.id, '–¢–∏–ø –º—É—Ä–∞–ª—É - '+row[5]+'\n–õ–æ–∫–∞—Ü—ñ—è, —É —è–∫—ñ–π —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –º—É—Ä–∞–ª - '+row[6]+'\n'+row[1]+' '+row[2]+' '+row[3].format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)

        elif message.text == '–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π —Ä–∞–π–æ–Ω':
            cur.execute("SELECT * from mozaik where district = '–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π'")
            rows = cur.fetchall()
            print(len(rows))
            for row in rows:
                path = row[10]
                bot.send_photo(message.chat.id, open(path, "rb"))
                bot.send_message(message.chat.id, '–¢–∏–ø –º—É—Ä–∞–ª—É - '+row[5]+'\n–õ–æ–∫–∞—Ü—ñ—è, —É —è–∫—ñ–π —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –º—É—Ä–∞–ª - '+row[6]+'\n'+row[1]+' '+row[2]+' '+row[3].format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)

        elif message.text == '–®–µ–≤—á–µ–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω':
            cur.execute("SELECT * from mozaik where district = '–®–µ–≤—á–µ–Ω–∫—ñ–≤—Å—å–∫–∏–π'")
            rows = cur.fetchall()
            print(len(rows))
            for row in rows:
                path = row[10]
                bot.send_photo(message.chat.id, open(path, "rb"))
                bot.send_message(message.chat.id, '–¢–∏–ø –º—É—Ä–∞–ª—É - '+row[5]+'\n–õ–æ–∫–∞—Ü—ñ—è, —É —è–∫—ñ–π —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –º—É—Ä–∞–ª - '+row[6]+'\n'+row[1]+' '+row[2]+' '+row[3].format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)

        elif message.text == '–°–∏—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω':
            cur.execute("SELECT * from mozaik where district = '–°–∏—Ö—ñ–≤—Å—å–∫–∏–π'")
            rows = cur.fetchall()
            print(len(rows))
            for row in rows:
                path = row[10]
                bot.send_photo(message.chat.id, open(path, "rb"))
                bot.send_message(message.chat.id, '–¢–∏–ø –º—É—Ä–∞–ª—É - '+row[5]+'\n–õ–æ–∫–∞—Ü—ñ—è, —É —è–∫—ñ–π —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –º—É—Ä–∞–ª - '+row[6]+'\n'+row[1]+' '+row[2]+' '+row[3].format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'author':
                text = call.message.text.split('\n')
                location = text[2].split()
                if len(location) == 3:
                    cur.execute("SELECT author,creation_period,mozaic_individual_number "
                                "from mozaik where address_type = '"
                                + location[0]+"'AND address_name = '"+location[1]+"'AND housenumber ='"+location[2]+"'")
                    author = cur.fetchall()
                    bot.send_message(call.message.chat.id, call.message.text+'\n\n–ê–≤—Ç–æ—Ä –º—É—Ä–∞–ª—É - '+author[0][0]+'\n–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É—Ä–∞–ª—É - '+author[0][1]+'\n–û—Å–æ–±–∏—Å—Ç–∏–π id –º—É—Ä–∞–ª—É - '+author[0][2])
                elif len(location) >= 4:
                    cur.execute(
                        "SELECT author,creation_period,mozaic_individual_number from mozaik where address_type = '" +
                        location[0] + "'AND address_name = '" + location[1] + " " + location[
                            2] + "'AND housenumber ='" + location[3] + "'")
                    author = cur.fetchall()
                    bot.send_message(call.message.chat.id, call.message.text + '\n\n–ê–≤—Ç–æ—Ä –º—É—Ä–∞–ª—É - ' + author[0][
                        0] + '\n–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É—Ä–∞–ª—É - ' + author[0][1] + '\n–û—Å–æ–±–∏—Å—Ç–∏–π id –º—É—Ä–∞–ª—É - ' + author[0][2])
            elif call.data == 'map':
                text = call.message.text.split('\n')
                location = text[2].split()
                if len(location) == 3:
                    cur.execute(
                        "SELECT geolocation from mozaik where address_type ='" + location[0] + "'AND address_name = '" +
                        location[1] + "'AND housenumber ='" + location[2] + "'")
                elif len(location) >= 4:
                    cur.execute(
                        "SELECT geolocation from mozaik where address_type = '" +
                        location[0] + "'AND address_name = '" + location[1] + " " + location[
                            2] + "'AND housenumber ='" + location[3] + "'")
                rows = cur.fetchall()
                geo = rows[0][0].split(' ')
                bot.send_message(call.message.chat.id, call.message.text)
                bot.send_location(call.message.chat.id, geo[0], geo[1])
    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
